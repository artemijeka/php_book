<?php
/**
 * Created by PhpStorm.
 * User: artem
 * Date: 12.09.18
 * Time: 8:59
 */

////////////////////////////////////////////////////////////////////////////////////////////////////
/**************************************** СОЗДАНИЕ КЛАССА: ****************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Шаблон для объектов
 */
class Cat
{
    /**
     * МОДИФИКАТОРЫ
     * Перед именем свойства всегда ставится модификатор доступа.
     *
     * PUBLIC
     * Доступны как внутри объектов класса, так и снаружи – можем напрямую обращаться к ним извне.
     * Доступны объектам классов-наследников.
     */
    public $name;
    /**
     * PRIVATE
     *
     * Доступны только внутри объектов этого класса, недоступны в объектах классов-наследников;
     */
    private $color;

    /**
     * PROTECTED
     *
     * Доступны внутри объектов этого класса и всем объектам классов-наследников.
     * При этом недоступны извне;
     */
    protected $foo;

    /**
     * ИНКАПСУЛЯЦИЯ
     *
     * То, что внутри объектов есть свойства - это уже проявление инкапсуляции.
     * У объекта есть свойства, он их внутри себя содержит - вот и "ин" "капсула".
     *
     * Модификаторы доступа - это ещё одно проявление инкапсуляции.
     *
     * Инкапсуляция - это возможность объектов содержать в себе свойства и методы.
     * Так мы делаем их зависимыми друг от друга внутри этой "капсулы".
     */
    private $weight;

    /**
     * КОНСТУРКТОР
     *
     * Обязательно вызывается автоматически при создании объекта класса, в котором он описан.
     * Метод-конструктор должен называться __construct. Именно так и никак иначе.
     */
    public function __construct(string $name, string $color)
    {
        $this->name = $name;
        $this->color = $color;
    }
    // Конструктор принято объявлять в начале класса, после объявления свойств, но перед другими методами.

    /**
     * МЕТОДЫ
     */
    public function sayHello()
    {
        /**
         * $THIS
         *
         * Внутри классов доступна специальная переменная $this->,
         * и она указывает на наш текущий созданный объект.
         * В отличии от self:: которая указывает на текущий класс.
         */
        echo 'Привет! Меня зовут ' . $this->name . '.';
        echo '<br>';
        echo 'Мой цвет ' . $this->color . ').';
        echo '<br>';
    }

    /**
     * СЕТТЕР
     *
     * Такие методы как setName(), задающие значения свойствам объекта называются сеттерами.
     */
    /**
     * Определение типа аргумента в методе method(string $name)
     *
     * Определение вывода метода через "method(): type",
     * так-же тип данных может быть каким-то существующим классом,
     * подробнее тут TYPE_HINTING.php
     */
    public function setName(string $name): void // пустота (void), то есть ничего сеттер не должен возвращать
    {
        $this->name = $name;
    }

    /**
     * ГЕТТЕР
     */
    /**
     * Возвращаемые значения для методов getColor(): string
     */
    public function getColor(): string // возвращяемое значение будет строкой
    {
        return $this->color;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/*************************************** СОЗДАНИЕ ОБЪЕКТА: ***************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
/************************************ ПРИМЕНЕНИЕ КОНСТРУТОРА: ************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * По классу (шаблону)
 *
 * Чтобы создать кота с именем Снежок мы должны передать аргумент при создании нового объекта:
 */
//$cat1 = new Cat('Снежок', 'Белый');
// $cat1 будет ссылкой на объект а не самим объектом!
// Только когда не будет не одной ссылки объект уничтожится из памяти.

/**
 * ИЗМЕНЕНИЕ СВОЙСТВА ОБЪЕКТА
 */
//$cat1->name = 'Барсик';
// После создания объекта можно и поменять публичные свойства.

/**
 * ВЫЗОВ МЕТОДА
 *
 * Для вызова метода объекта используется такой же оператор как и для доступа к свойствам объекта ->
 */
//$cat1->sayHello(); // 'Привет! Меня зовут Барсик.'

/**
 * ПРИМЕНЕНИЕ СЕТТЕРА
 */
//$cat1->setName('Пирожок');

/**
 * ПРИМЕНЕНИЕ ГЕТТЕРА
 */
//echo $cat1->getColor();
//var_dump($cat1);

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************** EXTENDS ********************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'EXTENDS.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************* INTERFACE *******************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'INTERFACES.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/********************************************* TRAITS *********************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'TRAITS.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/****************************************** POLYMORPHISM ******************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'POLYMORPHISM.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/***************************************** ABSTRACT CLASS *****************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'ABSTRACT_CLASS.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/********************************************* STATIC *********************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'STATIC.php';

////////////////////////////////////////////////////////////////////////////////////////////////////
/****************************************** TYPE HINTING ******************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
include_once 'TYPE_HINTING.php';