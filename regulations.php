<?php

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************* СРАВНЕНИЯ: *******************************************/
// СТРОК strcmp() или strcasecmp()
strcmp("abs", "ABS");// -1 так как ABS (верхний регистр) идет раньше, а abs позже, в символьной таблице PHP.
strcasecmp("abs", "ABS");// 0 так как abs === abs. Так как strcasecmp() - регистроНЕЗАВИСИМАЯ функция.

// СРАВНЕНИЯ СОСТАВНОЙ ОПЕРАЦИЕЙ <=> (PHP>7)
1 <=> 2;// -1 левое меньше правого.
"charlie" <=> "bob";// 1 левое больше правого, так как "c" идет после "b" в лексиграфической таблице PHP.

////////////////////////////////////////////////////////////////////////////////////////////////////
/*                                      РАБОТА С КАТАЛОГАМИ:                                      */
////////////////////////////////////////////////////////////////////////////////////////////////////
// ЧТЕНИЕ ИМЕН ФАЙЛОВ И КАТАЛОГОВ
scandir("catalog/");// отдаст также . и .. первыми двумя элементами массива

////////////////////////////////////////////////////////////////////////////////////////////////////
/********************************************* ЦИКЛЫ: *********************************************/
////////////////////////////////////////////////////////////////////////////////////////////////////
// FOR (для условия) for();

// WHILE (пока верно условие) while();

// FOREACH
foreach ($array as $key => $value) {
}

// FOREACH ВТОРОЙ ВАРИАНТ ЗАПИСИ
foreach ($array as $element):
#do something
endforeach;

////////////////////////////////////////////////////////////////////////////////////////////////////
/*************************************** ОБРАБОТЧИК ОШИБОК: ***************************************/
// http://php.net/set_error_handler
?>

<?php namespace \Tiny\Eating; // пространство имен, теперь все имена идущие после этого пространства будут относиться только к этому пространству (это полезно при внедрении постороннего кода в свою программу, чтобы имена не конфликтовали)
////////////////////////////////////////////////////////////////////////////////////////////////////
/*************************************** ПРОСТРАНСТВА ИМЕН: ***************************************/
// ЗАДАНИЕ ПРОСТРАНСТВА ИМЁН
class Fruit
{
    public static function munch($bite)
    {
        print"Here is a tiny munch of $bite.";
    }

    public function anyMethod()
    {
        return true;
    }
}

// ВОСПОЛЬЗОВАТЬСЯ КЛАССОМ В ПРОСТРАНСТВЕ ИМЕН
\Tiny\Fruit::munch("banana"); // сначала указывается корень пространства имен \ потом имя пространства Tiny, затем снова разделитель \ и далее имя класса Fruit, после имя статичного метода через :: munch();

// ПРИМЕНЕНИЕ КЛЮЧЕВОГО СЛОВА use ДЛЯ СОКРАЩЕНИЯ ОБРАЩЕНИЯ К ПРОСТРАНСТВУ ИМЕН
use \Tiny\Eating\Fruit as Snack;

Snack::munch("strawberry"); // вместо \Tiny\Eating\Fruit::munch();
Fruit::munch("orange"); // вместо \Tiny\Fruit::munch();

// СОЗДАНИЕ ОБЪЕКТА
use \Tiny\Eating as small;

$obj = new small\Fruit;
?>