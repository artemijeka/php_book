-------------------------------------- https://webshake.ru/php-i-mysql-s-nulya/2 ---------------------------------------
-------------------------------------------------- РАБОТА В ТЕРМИНАЛЕ --------------------------------------------------
-- cd /opt/lampp/bin
-- ./mysql -h localhost -u root -p
-- enter the password
-- USE users; -- where 'users' is db name

--------------------------------------------------- СОЗДАНИЕ ТАБЛИЦЫ ---------------------------------------------------
CREATE TABLE data
(
  id   INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(32),
  YEAR CHAR(4),
  PRIMARY KEY(id)
) CHARACTER SET utf8; -- Сразу установивив кодировку.

------------------------------------------------- КОНВЕРТАЦИЯ КОДИРОВКИ ------------------------------------------------
ALTER TABLE data CONVERT TO CHARACTER SET utf8;

--------------------------------------------------- ДОБАВЛЕНИЕ ДАННЫХ --------------------------------------------------
--INSERT INTO table COLUMNS ([столбцы]) VALUES ([значения]);

-- Здесь видно, что в команде необходимо указать, в какую таблицу будут добавляться данные,
-- и определить список значений. Если перечень столбцов (COLUMNS) не указан,
-- значения должны следовать в том же порядке, в каком определялись столбцы при создании таблицы
-- (если вы не пропускаете какие-либо значения). Есть определенные правила,
-- регламентирующие порядок заполнения базы данных с помощью команд SQL:

-- числовые значения должны указываться без кавычек;
-- строковые значения всегда должны быть в кавычках;
-- значения даты и времени всегда должны быть в кавычках;
-- функции должны указываться без кавычек;
-- значение NULL никогда не должно заключаться в кавычки.
INSERT INTO data
VALUES(1, 'Александр', '1950');
INSERT INTO data
VALUES(NULL, 'Дмитрий', '1960');
INSERT INTO data
VALUES(NULL, 'Elena', '1985');

--------------------------------------------- МНОЖЕСТВЕННАЯ ВСТАВКА ДАННЫХ ---------------------------------------------
INSERT INTO `images`(`name_image`)
VALUES ('04.jpg'),
       ('05.jpg'),
       ('06.jpg'),
       ('07.jpg'),
       ('08.jpg'),
       ('09.jpg'),
       ('10.jpg'),
       ('11.jpg'),
       ('12.jpg');

--------------------------------------------------- ВЫВЕСТИ ОПИСАНИЕ ---------------------------------------------------
DESCRIBE data;

------------------------------------------------ ПЕРЕИМЕНОВАНИЕ ТАБЛИЦЫ ------------------------------------------------
ALTER TABLE data RENAME users_data;

------------------------------------------------ ПЕРЕИМЕНОВАНИЕ СТОЛБЦА ------------------------------------------------
-- ALTER TABLE имя_таблицы CHANGE старое_имя_столбца новое_имя_столбца
ALTER TABLE articles CHANGE COLUMN old_name new_name VARCHAR(255); -- обязательно в конце тип данных.

-- При работе с этой командой вы можете одновременно изменять определение столбца.
-- Однако даже если определение столбца не изменяется, вам все же придется указывать его полное определение:

------------------------------------------------- ИЗМЕНЕНИЕ ТИПА ДАННЫХ ------------------------------------------------
--ALTER TABLE имя_таблицы MODIFY имя_столбца тип_данных
ALTER TABLE users_data MODIFY name VARCHAR(100);

-- Кроме того, команда MODIFY может принимать два необязательных параметра,
-- изменяющих порядок следования столбцов в таблице.
-- С помощью ключевого слова FIRST можно сделать столбец первым в таблице,
-- а с помощью ключевого слова AFTER имя_столбца – поместить столбец после указанного.
-- Например, следующая команда разместит столбец name после столбца year:
ALTER TABLE users_data MODIFY name VARCHAR(32) AFTER year;

-------------------------------------------------- ДОБАВЛЕНИЕ СТОЛБЦА --------------------------------------------------
-- ALTER TABLE имя_таблицы ADD имя_столбца тип_данных
ALTER TABLE users_data
ADD regDate DATETIME;

-- В этой команде, как и в конструкции ALTER TABLE MODIFY,
-- можно определить позицию вставляемого столбца с помощью
-- ключевых слов FIRST и AFTER имя_столбца.

-------------------------------------------------- УДАЛЕНИЕ СТОЛБЦОВ ---------------------------------------------------
-- ALTER TABLE имя_таблицы DROP имя_столбца
ALTER TABLE users_data DROP COLUMN regTime;

------------------------------------------------ ВЫПОЛНЕНИЕ ЗАПРОСОВ ---------------------------------------------------
-- SELECT столбцы FROM таблица [WHERE условие отбора строк] [ORDER BY порядок сортировки];

-- Здесь столбцы – перечень имен полей, значения которых будут отбираться из таблиц.
-- Необязательное ключевое слово WHERE задает ограничение на отбор строк, другими словами,
-- ключевое слово WHERE ограничивает результаты, возвращаемые запросом. Например,
-- строки могут быть отвергнуты запросом, если некоторое их поле не равно какому-либо значению,
-- либо больше или меньше его. Ключевое слово ORDER BY позволяет определить
-- требуемый порядок сортировки информации, возвращаемой запросом.

SELECT *
FROM users_data;

-- Иногда в запросе вместо символа звездочки удобнее перечислить отбираемые столбцы:
SELECT name, year
FROM users_data;

-- Если вас интересует только какие-то определенные поля таблицы,
-- вы можете ограничить набор возвращаемых данных с помощью ключевого слова WHERE, например:
SELECT *
FROM users_data
WHERE name="Александр";

-- Условные выражения должны следовать за ключевым словом WHERE.
-- C помощью логических операторов AND и OR в конструкции WHERE
-- можно определить сразу несколько условий.
-- Порядок исполнения логических операторов изменяется с помощью круглых скобок ().

------------------------------------------------- ПОРЯДОК СОРТИРОВКИ ---------------------------------------------------
-- Изменить порядок сортировки результирующего набора данных позволяет ключевое слово ORDER BY.
-- По умолчанию ORDER BY задает сортировку в порядке возрастания, поэтому для сортировки пользователей в
-- алфавитном порядке можно просто указать ORDER BY name. Чтобы назначить противоположный порядок сортировки,
-- следует добавить ключевое слово DESC после имени поля name.
SELECT *
FROM users_data
ORDER BY name DESC;

-------------------------------------------------- СОЕДИНЕНИЕ ТАБЛИЦ ---------------------------------------------------
-- Инструкция SELECT позволяет выполнять запросы сразу к нескольким таблицам.
-- В примере ниже создается таблица purchases (покупки), в которую добавляются несколько строк для примера.
-- Затем формируется запрос для получения списка всех купленных товаров с указанием идентификатора покупателя:

-- Создать новую таблицу purchases
CREATE TABLE purchases
(
  purchaseId INT AUTO_INCREMENT,
  user_name  VARCHAR(32),
  product    VARCHAR(256),
  date       DATE,
  PRIMARY KEY(purchaseId)
);

-- Поменять кодировку
ALTER TABLE purchases CONVERT TO CHARACTER SET utf8;

-- Наполнить данными
INSERT INTO purchases
VALUES(1, 'Elena', 'Телефон Samsung Galaxy S3', '2012-11-26 17:04:29');

INSERT INTO purchases
VALUES(NULL, 'Elena', 'Телефон Nokia Lumia', '2013-04-05 12:06:55');

-- Извлечь все заказы из таблицы purchases пользователя 'Elena' таблицы users_data
SELECT users_data.*, product
FROM users_data,
     purchases
WHERE users_data.name = purchases.user_name;

---------------------------------------------------- NATURAL JOIN ------------------------------------------------------
-- Получить те же результаты, но меньше вводя с клавиатуры, позволяет ключевое слово NATURAL JOIN.
-- При выполнении естественного соединения MySQL автоматически соединяет одноименные поля двух таблиц.
-- В нашем случае мы не имеем одноименных полей, поэтому давайте это изменим и посмотрим на эту конструкцию в действии:

-- Переименуем столбец user_name таблицы purchases в name
ALTER TABLE purchases CHANGE user_name name VARCHAR(32);

-- Выполним естественное соединение
SELECT *
FROM users_data
       NATURAL JOIN purchases;

------------------------------------------------------ JOIN ON ---------------------------------------------------------
-- Конструкция JOIN ON похожа на инструкцию естественного соединения,
-- но предоставляет возможность явно определить поля, по которым следует выполнять соединение,
-- не полагаясь на автоматический выбор по их именам.

-- SELECT столбцы FROM имя_таблицы JOIN таблицы ON (условия)

---------------------------------------------------- ПСЕВДОНИМЫ --------------------------------------------------------
-- Перечисляя таблицы в запросе, используйте псевдонимы (aliases). Чтобы определить псевдоним таблицы,
-- нужно после ее полного имени поставить ключевое слово AS и затем указать псевдоним.
-- Например, присвоим в запросе таблице users_data псевдоним "u", а таблице purchases псевдоним "p":
SELECT *
FROM users_data AS u,
     purchases AS p
WHERE u.name = p.name;

-- Определив псевдоним таблицы, можно обращаться к ней по псевдониму в любом месте запроса.
-- Псевдонимы удобны в качестве подмены длинных имен таблиц. Кроме того,
-- они позволяют дважды включать в запрос одну и ту же таблицу и определять,
-- в каком случае какой экземпляр таблицы следует использовать.

------------------------------------------------- ОБНОВЛЕНИЕ ДАННЫХ ----------------------------------------------------
UPDATE users_data
SET year='1000'
WHERE name = 'Александр'
-- Данный запрос изменит значение поля year для всех пользователей с именем 'Александр' в таблице users_data,
-- установив его равным значению '1000'. Этот прием позволяет исправлять ошибочные данные и вносить изменения.

-------------------------------------------------- УДАЛЕНИЕ ДАННЫХ -----------------------------------------------------
-- Прежде чем воспользоваться командой DELETE, не забудьте создать резервные копии своих данных,
-- в противном случае вы рискуете потерять все данные, нажив кучу неприятностей.
-- В следующем примере из базы данных будет удален пользователь с id = 2:
DELETE
FROM users_data
WHERE id = 2;

-------------------------------------------------- УДАЛЕНИЕ ТАБЛИЦЫ ----------------------------------------------------
DROP TABLE table_name;

------------------------------------------------ УДАЛЕНИЕ БАЗЫ ДАННЫХ --------------------------------------------------
DROP DATABASE test;

--------------------------------------------------- ПОИСК ДАННЫХ -------------------------------------------------------
-- В MySQL роль шаблонного символа исполняет символ (%), используемый совместно с ключевым словом LIKE (такой как).
-- То есть этим символом можно буквально представить все, что угодно.
-- По умолчанию поиск выполняется БЕЗ учета РЕГИСТРА букв.
SELECT *
FROM users_data
WHERE name LIKE "%р%";
-- Этот запрос нашел все записи, в значении поля name которых есть символ (р).
-- Символ (%), помещенный в любое место строки в инструкции LIKE, означает,
-- что на этом месте в строке может быть что угодно.

-- Еще один шаблонный символ – символ подчеркивания (_). Он соответствует любому единственному символу.
-- С использованием этого шаблонного символа можно выполнить такой поиск:
SELECT *
FROM users_data
WHERE name LIKE "Elen_";
-- В результате будут получены все строки, где имя пользователя начинается с "Elen" и кончается любым символом.